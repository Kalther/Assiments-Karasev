#! usr/bin/env python


"""
Logical operations, functions, namespaces
"""

from __future__ import print_function, division
import operator

# Task 2 - не знаю, как проверить единственный аргумент-список
def my_min(args):
    a = list(args)
    if not(args.isdight() and len(args) > 1):
        raise ValueError("You can't take a minimum/maximum of such kind of information")
    return sorted(a)[0]

def my_max(*args):
    if not args:
       raise ValueError("no arguments pass")

    def find_max(seq):
        if not isinstance(seq, (tuple, list)):
           raise ValueError("alarma!!!")
        current_max = seq[0]
        for element in seq:
        if element not isinstance(element, int):
            raise ValueError("")
        if current_max < element:
            current_max = element
    return current_max
return find_max(args[0] if len(args) else args)



# Task



# Task 3
def my_map(fn, elements, **kwargs):
    result = []
    for element in elements:
        result.append(fn(element, **kwargs))
    return result



def my_filter(fn, elements, **kwargs):
    result = []
    for element in elements:
        if fn(element):
            result.append(element)
    return result



# Task 4

def calculate(numbers, operator):
    if len(numbers) != len(operator) + 1:
        raise ValueError("!!!")

    operation_dict = {
        "+": operator.add,
        "-": operator.sub,
        "*": operator.mul,
        "/": operator.div
    }
    numbers_iterator = iter(numbers)
    acc = next(numbers_iterator)
    for num, oper in zip(numbers_iterator, operator):
        oper_func = operation_dict.get(oper)
        if not oper_func:
            raise ValueError("Operation {} isn't supported".format(oper))
        acc = oper_func(acc, num)
    return acc



# Task 5

def evaluate_string(str_calk):
    numbers = []
    operator = []
    i = -1
    order = 0
    def numberator():
        complex_num = 0
        j = 0
        for arg in str_calk[i-order:i+1]:
            complex_num = complex_num + (arg * (10**(order-j)))
            j = j + 1
        return numbers.append(complex_num)
    for arg in str_calk:
        i = i + 1
        if arg == "+" or arg == "-" or arg == "*" or arg == "/":
            operator.append(arg)
            numberator()
            order = 0
        elif arg.isdigit():
            order = order + 1
        elif arg == "(" or arg == ")" or arg == " ":
            numberator()
            order = 0
            continue
        else:
            raise ValueError("Please, enter a valid symbol instead of {}".format(arg))
    return calculate(numbers, operator)

