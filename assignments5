#! usr/bin/env python

from __future__ import print_function, division
import itertools


# Task 1

gen_code = {
    "ttt": "F",
    "ttc": "F",
    "tta": "L",
    "ctt": "L",
    "ttg": "L",
    "ctc": "L",
    "cta": "L",
    "ctg": "L",
    "att": "M",
    "atc": "M",
    "ata": "M",
    "atg": "I",
    "gtt": "V",
    "gtc": "V",
    "gta": "V",
    "gtg": "V",
    "tct": "S",
    "tcc": "S",
    "tca": "S",
    "tcg": "S",
    "cct": "P",
    "ccc": "P",
    "cca": "P",
    "ccg": "P",
    "act": "U",
    "acc": "U",
    "aca": "U",
    "acg": "U",
    "gct": "A",
    "gcc": "A",
    "gca": "A",
    "gcg": "A",
    "tat": "Y",
    "tac": "Y",
    "taa": "!",
    "tag": "!",
    "cat": "H",
    "cac": "H",
    "caa": "Q",
    "cag": "Q",
    "aat": "N",
    "aac": "N",
    "aaa": "K",
    "aag": "K",
    "gat": "D",
    "gac": "D",
    "gaa": "E",
    "gag": "E",
    "tgt": "C",
    "tgc": "C",
    "tga": "!",
    "tgg": "W",
    "cgt": "R",
    "cgc": "R",
    "cga": "R",
    "cgg": "R",
    "agt": "S",
    "agc": "S",
    "aga": "R",
    "agg": "R",
    "ggt": "G",
    "ggc": "G",
    "gga": "G",
    "ggg": "G",
}

def reconstruct_protein_alignment(*args):
    """
    :type args: str
    :param args: str
    :return:
    """
    i = 0
    codon = []
    protein = []
    for nucleotide in args:
        i += 1
        if nucleotide != "-":
            codon.append(nucleotide)
        if i == 3 and len(codon) == 0:
            protein.append("-")
            i = 0
        elif len(codon) == 3:
            protein.append(gen_code["".join(codon)])
            codon = []
            i = 0
        elif i == 6:
            protein.append("-" * 2)
            codon = []
            i = 0
    return "".join(protein)


# Task 2

def decompose(n):
    """
    : type n: int
    :param n: int
    :return:
    """
    if n < 1 or n > 10**9:
        raise ValueError("Please, enter a number between 1 and 1 000 000 000!")
    result = []
    for iternum in xrange(1, 10**9):
        result.append(iternum)
        if sum(result) > n:
            result.remove(sum(result)-n)
    print (result)